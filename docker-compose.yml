# Docker Compose for SNN-Fusion Production Deployment
version: '3.8'

services:
  # Main SNN-Fusion API service
  snn-fusion-api:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
      args:
        BUILD_ENV: production
    image: snn-fusion:latest
    container_name: snn-fusion-api
    ports:
      - "8080:8080"
    environment:
      - DATABASE_TYPE=postgresql
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
      - DATABASE_NAME=snn_fusion
      - DATABASE_USER=snn_user
      - DATABASE_PASSWORD=${POSTGRES_PASSWORD:-snn_password}
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY:-production-secret-key}
      - LOG_LEVEL=INFO
    volumes:
      - ./data:/app/data
      - ./models:/app/models
      - ./outputs:/app/outputs
      - ./logs:/app/logs
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    networks:
      - snn-fusion-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL database
  postgres:
    image: postgres:15-alpine
    container_name: snn-fusion-postgres
    environment:
      - POSTGRES_DB=snn_fusion
      - POSTGRES_USER=snn_user
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-snn_password}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init_db.sql:/docker-entrypoint-initdb.d/init_db.sql:ro
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - snn-fusion-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U snn_user -d snn_fusion"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis cache
  redis:
    image: redis:7-alpine
    container_name: snn-fusion-redis
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    restart: unless-stopped
    networks:
      - snn-fusion-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx reverse proxy
  nginx:
    image: nginx:1.24-alpine
    container_name: snn-fusion-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./configs/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./static:/var/www/static:ro
    depends_on:
      - snn-fusion-api
    restart: unless-stopped
    networks:
      - snn-fusion-network

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: snn-fusion-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./configs/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    restart: unless-stopped
    networks:
      - snn-fusion-network

  # Grafana dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: snn-fusion-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./configs/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./configs/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - snn-fusion-network

  # Training worker service
  training-worker:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    image: snn-fusion:latest
    container_name: snn-fusion-worker
    command: ["python", "-m", "snn_fusion.training.worker"]
    environment:
      - DATABASE_TYPE=postgresql
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
      - DATABASE_NAME=snn_fusion
      - DATABASE_USER=snn_user
      - DATABASE_PASSWORD=${POSTGRES_PASSWORD:-snn_password}
      - REDIS_URL=redis://redis:6379/0
      - CUDA_VISIBLE_DEVICES=0
    volumes:
      - ./data:/app/data
      - ./models:/app/models
      - ./outputs:/app/outputs
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    networks:
      - snn-fusion-network
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

# Named volumes for data persistence
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# Custom network
networks:
  snn-fusion-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16