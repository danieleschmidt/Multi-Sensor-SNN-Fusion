# SNN-Fusion Docker Compose Configuration
# Production deployment with load balancing and monitoring

version: '3.8'

services:
  # SNN-Fusion application instances
  snn-fusion-app-1:
    build:
      context: ../..
      dockerfile: deployment/docker/Dockerfile
      target: production
    image: snn-fusion:latest
    container_name: snn-fusion-app-1
    environment:
      - SNN_FUSION_ENV=production
      - SNN_FUSION_NODE_ID=app-1
      - SNN_FUSION_PORT=8000
      - SNN_FUSION_WORKERS=4
      - SNN_FUSION_LOG_LEVEL=INFO
      - SNN_FUSION_CACHE_SIZE_MB=1000
      - SNN_FUSION_MONITORING_ENABLED=true
    ports:
      - "8001:8000"
    volumes:
      - snn_data_1:/home/snn_user/data
      - snn_logs_1:/home/snn_user/logs
      - snn_models_1:/home/snn_user/models
    networks:
      - snn-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  snn-fusion-app-2:
    build:
      context: ../..
      dockerfile: deployment/docker/Dockerfile
      target: production
    image: snn-fusion:latest
    container_name: snn-fusion-app-2
    environment:
      - SNN_FUSION_ENV=production
      - SNN_FUSION_NODE_ID=app-2
      - SNN_FUSION_PORT=8000
      - SNN_FUSION_WORKERS=4
      - SNN_FUSION_LOG_LEVEL=INFO
      - SNN_FUSION_CACHE_SIZE_MB=1000
      - SNN_FUSION_MONITORING_ENABLED=true
    ports:
      - "8002:8000"
    volumes:
      - snn_data_2:/home/snn_user/data
      - snn_logs_2:/home/snn_user/logs
      - snn_models_2:/home/snn_user/models
    networks:
      - snn-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Load balancer
  nginx:
    image: nginx:alpine
    container_name: snn-fusion-lb
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    networks:
      - snn-network
    depends_on:
      - snn-fusion-app-1
      - snn-fusion-app-2
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for distributed caching
  redis:
    image: redis:7-alpine
    container_name: snn-fusion-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-snn_fusion_cache}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - snn-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: snn-fusion-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - snn-network
    restart: unless-stopped

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: snn-fusion-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - snn-network
    depends_on:
      - prometheus
    restart: unless-stopped

  # Log aggregation with ELK Stack (Elasticsearch)
  elasticsearch:
    image: elasticsearch:8.8.0
    container_name: snn-fusion-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - snn-network
    restart: unless-stopped

  # Kibana for log visualization
  kibana:
    image: kibana:8.8.0
    container_name: snn-fusion-kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    networks:
      - snn-network
    depends_on:
      - elasticsearch
    restart: unless-stopped

networks:
  snn-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16

volumes:
  snn_data_1:
    driver: local
  snn_logs_1:
    driver: local
  snn_models_1:
    driver: local
  snn_data_2:
    driver: local
  snn_logs_2:
    driver: local
  snn_models_2:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local