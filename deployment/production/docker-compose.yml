version: '3.8'

services:
  # SNN-Fusion Core Application
  snn-fusion-api:
    build:
      context: ../..
      dockerfile: deployment/production/Dockerfile
    container_name: snn-fusion-api
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - ENV=production
      - LOG_LEVEL=INFO
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - SECRET_KEY=${SECRET_KEY}
      - ENABLE_MONITORING=true
      - ENABLE_TRACING=true
      - NEUROMORPHIC_HARDWARE_ENABLED=${NEUROMORPHIC_HARDWARE_ENABLED:-false}
    volumes:
      - ./logs:/app/logs
      - ./models:/app/models
      - ./data:/app/data
    depends_on:
      - postgres
      - redis
      - prometheus
      - jaeger
    networks:
      - snn-fusion-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Load Balancer (NGINX)
  nginx:
    image: nginx:alpine
    container_name: snn-fusion-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - snn-fusion-api
    networks:
      - snn-fusion-network

  # Database
  postgres:
    image: postgres:15-alpine
    container_name: snn-fusion-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-snn_fusion}
      - POSTGRES_USER=${POSTGRES_USER:-snn_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - snn-fusion-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-snn_user} -d ${POSTGRES_DB:-snn_fusion}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: snn-fusion-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - snn-fusion-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: snn-fusion-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - snn-fusion-network

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: snn-fusion-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - snn-fusion-network
    depends_on:
      - prometheus

  # Distributed Tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: snn-fusion-jaeger
    restart: unless-stopped
    ports:
      - "16686:16686"
      - "14268:14268"
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - snn-fusion-network

  # ElasticSearch for Logs
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: snn-fusion-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - snn-fusion-network
    healthcheck:
      test: ["CMD-SHELL", "curl --silent --fail localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 30s
      retries: 3

  # Logstash for Log Processing
  logstash:
    image: docker.elastic.co/logstash/logstash:8.8.0
    container_name: snn-fusion-logstash
    restart: unless-stopped
    volumes:
      - ./logstash/logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro
    depends_on:
      - elasticsearch
    networks:
      - snn-fusion-network

  # Kibana for Log Visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    container_name: snn-fusion-kibana
    restart: unless-stopped
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - snn-fusion-network

  # Message Queue (RabbitMQ)
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: snn-fusion-rabbitmq
    restart: unless-stopped
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER:-snn_user}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD}
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - snn-fusion-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 30s
      retries: 3

  # Worker Processes
  snn-fusion-worker:
    build:
      context: ../..
      dockerfile: deployment/production/Dockerfile.worker
    container_name: snn-fusion-worker
    restart: unless-stopped
    environment:
      - ENV=production
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - RABBITMQ_URL=${RABBITMQ_URL}
      - WORKER_CONCURRENCY=4
    volumes:
      - ./logs:/app/logs
      - ./models:/app/models
      - ./data:/app/data
    depends_on:
      - postgres
      - redis
      - rabbitmq
    networks:
      - snn-fusion-network
    deploy:
      replicas: 3

  # Neuromorphic Hardware Interface (Optional)
  neuromorphic-interface:
    build:
      context: ../..
      dockerfile: deployment/production/Dockerfile.neuromorphic
    container_name: snn-fusion-neuromorphic
    restart: unless-stopped
    environment:
      - ENV=production
      - HARDWARE_TYPE=${NEUROMORPHIC_HARDWARE_TYPE:-loihi2}
      - DEVICE_ADDRESS=${NEUROMORPHIC_DEVICE_ADDRESS}
    volumes:
      - /dev:/dev
      - ./neuromorphic:/app/neuromorphic
    depends_on:
      - snn-fusion-api
    networks:
      - snn-fusion-network
    privileged: true
    profiles:
      - neuromorphic

networks:
  snn-fusion-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:
  elasticsearch_data:
  rabbitmq_data: